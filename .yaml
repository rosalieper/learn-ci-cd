Parameters:
# whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
  EnviromentName:
    Description: An enviroment name will be prefixed to resurce names
    Type: string

  VpcCIDR:
    Description: The IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PrivateSubnet1CICR:
    Description: IP range (CIDR notation) for this subnet
    Type: String
    Default: 10.0.0.0/24

  PrivateSubnet2CICR:
    Description: IP range (CIDR notation) for this subnet
    Type: String
    Default: 10.0.0.0/24

  PublicSubnetCICR:
    DEscription: IP range (CIDR notation) for this subnet
    Type: String
    Default: 10.0.0.0/24

Resources:
  #instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - UdacityS3ReadOnlyEC2
  
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
  Outputs: 
    echo 'Your servers are up and running.'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLauch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnviromentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLauch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnviromentName} Private Subnet ()

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLauch: false
      Tags:
        - key: Name
          Value: !Sub ${EnviromentName} Private Subnet ()

  NatGatewayEIP:
   Type: AWS::EC2::EIP
     DependsOn: InternetGatewayAttachment
     Properties:
       Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt NatGatewayEIP.AllocationId
        SubnetId: !Ref PublicSubnet

  VPC:
    Type : 'AWS::EC2::VPC',
    Properties :
       CidrBlock : !Ref VpcCIDR
       EnableDnsHostnames: 'true'
    Tags:
    - Key: name
      Value: myfirstcloudformationvpc
  PrivateServer1:
    "Type" : "" 
